الگوریتم Floyd-Warshall

الگوریتم Floyd-Warshall برای یافتن کوتاه‌ترین مسیر بین تمام جفت گره‌ها در یک گراف وزندار استفاده می‌شود. این الگوریتم می‌تواند گراف‌هایی با وزن‌های منفی (بدون دور منفی) را نیز مدیریت کند.
ایده اصلی:

الگوریتم به تدریج تمام گره‌ها را به عنوان واسطه (intermediate) برای هر جفت گره در نظر می‌گیرد. اگر مسیر کوتاه‌تری از طریق گره واسطه پیدا شود، وزن بین جفت گره‌ها به‌روزرسانی می‌شود.
مراحل کار الگوریتم:

    ماتریس اولیه: از ماتریس مجاورت (adjacency matrix) یا مشابه آن استفاده کنید. مقدار اولیه بین هر دو گره، وزن مستقیم یال بین آنها است. اگر یالی وجود ندارد، مقدار بی‌نهایت (∞∞) قرار دهید.
    سه حلقه تودرتو:
        حلقه خارجی برای گره واسطه kk.
        حلقه‌های داخلی برای جفت گره‌های (i,j)(i,j).
        اگر مسیر i→k→ji→k→j کوتاه‌تر از مسیر مستقیم i→ji→j باشد، مقدار مسیر به‌روزرسانی می‌شود.
    پایان: ماتریس به‌روزرسانی‌شده شامل کوتاه‌ترین مسیرها خواهد بود.

کد پیاده‌سازی:

const floydWarshall = (graph) => {
    const V = graph.length;
    const dist = Array.from({ length: V }, (_, i) =>
        Array.from({ length: V }, (_, j) => graph[i][j])
    );

    for (let k = 0; k < V; k++) {
        for (let i = 0; i < V; i++) {
            for (let j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    return dist;
};

// مقدار بی‌نهایت برای مسیرهایی که یال مستقیم ندارند 